-- Properties
-- The factor used to calculate lerp smoothing.
go.property("smoothing_factor", 10)

-- Constants
-- TODO: Move to data available on disk project-wide (JSON resource?)
local WINDOW_WIDTH = 640
local WINDOW_HEIGHT = 360
local WINDOW_VECTOR = vmath.vector3(WINDOW_WIDTH, WINDOW_HEIGHT, 0)

function init(self)
	msg.post("#camera", "enable")

	self.target_position = vmath.vector3()
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	local position = go.get_position()
	position = vmath.lerp(1 - math.exp(-dt * self.smoothing_factor), position, self.target_position)
	go.set_position(position)
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("reposition") then
		self.target_position = message.position - (WINDOW_VECTOR / 2)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
