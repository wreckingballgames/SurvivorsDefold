-- Properties
-- The speed at which the player moves in pixels per second.
go.property("move_speed", 250)
-- Whether or not the player has the sword ability.
go.property("has_sword_ability", true)
-- The sword ability's starting cooldown in seconds.
go.property("sword_ability_base_cooldown", 3)
-- The player's base max HP.
go.property("base_hp", 15)
-- How much experience the player must collect to level up.
go.property("experience_max", 100)
-- What level the player starts at.
go.property("starting_level", 1)
-- The level cap.
go.property("level_cap", 100)

-- Constants
local GAME_CAMERA_URL = msg.url("main:/game_camera")
local EXPERIENCE_BAR_URL = msg.url("main:/experience_bar")

local function tick_ability_cooldowns(self, dt)
	self.sword_ability_cooldown = self.sword_ability_cooldown - dt
end

local function sort_nearby_enemies(self)
	local player_position = go.get_position()

	local function sort_by_distance_from_player(a, b)
		return (vmath.length_sqr(go.get_position(a) - player_position)) < vmath.length_sqr((go.get_position(b) - player_position))
	end

	table.sort(self.nearby_enemies, sort_by_distance_from_player)
end

local function handle_abilities(self)
	local target_id = nil
	-- Get ID of an enemy if there are any nearby
	sort_nearby_enemies(self)
	for id, _ in pairs(self.nearby_enemies) do
		target_id = id
		break
	end

	-- Sword ability
	if target_id and self.sword_ability_cooldown <= 0 and self.has_sword_ability then
		factory.create("#sword_ability_factory", go.get_position(target_id))
		self.sword_ability_cooldown = self.sword_ability_base_cooldown + self.sword_ability_cooldown_modifier
	end
end

local function move(self, dt)
	-- Ensure diagonal movement is same speed as orthoganal movement.
	if vmath.length_sqr(self.direction) > 1 then
		self.direction = vmath.normalize(self.direction)
	end

	-- Move the player.
	go.set_position(go.get_position() + (self.direction * self.move_speed * dt))

	-- Reset direction vector for next frame.
	self.direction = vmath.vector3()
end

local function announce_position(self)
	local position_table = { position = go.get_position() }
	for _, url in pairs(self.position_listener_URLs) do
		msg.post(url, "position_announced", position_table)
	end
end

local function die(self)
	go.delete()
	for _, url in pairs(self.death_listener_URLs) do
		msg.post(url, "player_died")
	end
end

local function take_damage(self, damage)
	self.hp = self.hp - damage
end

local function level_up(self, experience)
	self.level = math.min(self.level + 1, self.level_cap)
end

local function gain_experience(self, experience)
	self.experience = self.experience + experience
	if self.experience >= self.experience_max then
		level_up(self, experience)
	end
	msg.post(EXPERIENCE_BAR_URL, "experience_updated", { experience = self.experience, level = self.level })
end

function init(self)
	msg.post(".", "acquire_input_focus")
	-- Notify the experience bar what the experience max is so it can draw the bar correctly.
	msg.post(EXPERIENCE_BAR_URL, "set_experience_max", { experience_max = self.experience_max })

	-- The direction the player is facing.
	self.direction = vmath.vector3()
	-- The sword ability's cooldown period in seconds.
	self.sword_ability_cooldown = self.sword_ability_base_cooldown
	-- The modifier for the sword ability's cooldown, if any, in seconds.
	self.sword_ability_cooldown_modifier = 0
	-- The table of enemies in range. Use IDs for keys and positions for values.
	self.nearby_enemies = {}
	-- The list of URLs to post messages about position updates to.
	self.position_listener_URLs = {}
	self.position_listener_URLs[hash(GAME_CAMERA_URL.path)] = GAME_CAMERA_URL
	-- The list of URLs to post death message to.
	self.death_listener_URLs = {}
	self.death_listener_URLs[hash(GAME_CAMERA_URL.path)] = GAME_CAMERA_URL
	-- Set starting HP.
	self.hp = self.base_hp
	-- How much damage touching enemies causes.
	self.enemy_touch_damage = 1
	-- How much experience the player currently has.
	self.experience = 0
	-- The player's experience level.
	self.level = self.starting_level
end

function update(self, dt)
	if self.hp <= 0 then
		die(self)
	end

	move(self, dt)
	announce_position(self)

	tick_ability_cooldowns(self, dt)
	handle_abilities(self)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("trigger_response") then
		local is_enemy_detected = message.own_group == hash("enemy_detector") and message.other_group == hash("enemies")
		local other_id = hash(message.other_id)

		-- Handle enemy detection
		if is_enemy_detected and message.enter then
			self.nearby_enemies[other_id] = go.get_position(other_id)
		elseif is_enemy_detected and not message.enter then
			self.nearby_enemies[other_id] = nil
		end
	elseif message_id == hash("enemy_spawned") then
		local enemy_id = hash(message.enemy_url.path)
		self.position_listener_URLs[enemy_id] = message.enemy_url
		self.death_listener_URLs[enemy_id] = message.enemy_url
	elseif message_id == hash("enemy_died") then
		-- Remove dead enemy from tables.
		self.nearby_enemies[message.enemy_id] = nil
		self.position_listener_URLs[message.enemy_id] = nil
		self.death_listener_URLs[message.enemy_id] = nil
	elseif message_id == hash("touched_by_enemy") then
		take_damage(self, self.enemy_touch_damage)
	elseif message_id == hash("experience_vial_picked_up") then
		gain_experience(self, message.experience)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("move_left") then
		self.direction.x = -1
	elseif action_id == hash("move_right") then
		self.direction.x = 1
	elseif action_id == hash("move_down") then
		self.direction.y = -1
	elseif action_id == hash("move_up") then
		self.direction.y = 1
	end

	-- Do not consume input.
	return false
end